# Dictionary to maintain order quantities for each user
user_order_quantities = {}

@bot.on_message(filters.command("list_products"))
async def list_products(client, message):
    try:
        products = products_collection.find()
        product_list = list(products)

        if not product_list:
            await message.reply("<b>❌ Tidak ada produk yang tersedia.</b>")
            return

        # Menampilkan produk pertama
        await show_product(client, message.chat.id, product_list, 0)

    except Exception as e:
        await message.reply("Terjadi kesalahan saat mengambil daftar produk. Silakan coba lagi nanti.")
        print(f"Error: {e}")

async def show_product(client, chat_id, product_list, index, callback_query=None):
    user_id = chat_id  # Gunakan chat_id sebagai pengenal unik untuk pengguna
    order_quantity = user_order_quantities.get(user_id, 0)  # Ambil jumlah pesanan pengguna

    try:
        product = product_list[index]
        code = product.get('code', '❌')
        name = product.get('name', '❌')
        description = product.get('description', '❌')
        price = product.get('price', '0')
        stock = int(product.get('stock', 0))

        response = (f"<b>Kode:</b> {code}\n"
                    f"<b>Nama:</b> {name}\n"
                    f"<b>Deskripsi:</b> {description}\n"
                    f"<b>Harga:</b> {price}\n"
                    f"<b>Stok:</b> {stock}\n"
                    f"<b>Jumlah Pesanan:</b> {order_quantity}")

        buttons = []

        # Tombol navigasi
        nav_buttons = []
        if index > 0:
            nav_buttons.append(InlineKeyboardButton("⬅️", callback_data=f"product_{index - 1}"))  # Produk sebelumnya
        if index < len(product_list) - 1:
            nav_buttons.append(InlineKeyboardButton("➡️", callback_data=f"product_{index + 1}"))  # Produk berikutnya
        
        if nav_buttons:
            buttons.append(nav_buttons)  # Tambahkan tombol navigasi dalam satu baris

        # Tombol manajemen pesanan
        if stock > 0:
            print(f"Membuat tombol untuk kode produk: {code}")  # Log untuk debugging
            order_buttons = [
                InlineKeyboardButton("+", callback_data=f"increment_quantity_{code}"),  # Tambah jumlah
                InlineKeyboardButton("-", callback_data=f"decrement_quantity_{code}")   # Kurangi jumlah
            ]
            confirm_button = [
                InlineKeyboardButton("Konfirmasi Pesanan", callback_data=f"confirm_order_{code}_{order_quantity}")  # Konfirmasi pesanan
            ]

            # Menambahkan tombol ke keyboard
            buttons.append(order_buttons)  # Tambah tombol +/- dalam satu baris
            buttons.append(confirm_button)   # Tambah tombol konfirmasi di baris baru

        # Membuat keyboard dengan tombol dalam beberapa baris
        keyboard = InlineKeyboardMarkup(buttons) if buttons else None

        # Menggunakan ID pesan yang benar
        if callback_query is None or index == 0:
            await client.send_message(chat_id, response, reply_markup=keyboard)
        else:
            await client.edit_message_text(callback_query.message.chat.id, callback_query.message.id, response, reply_markup=keyboard)

    except IndexError:
        await client.send_message(chat_id, "❌ Produk tidak ditemukan.")
    except ValueError:
        await client.send_message(chat_id, "❌ Terjadi kesalahan saat memproses stok.")
    except Exception as e:
        print(f"Error in show_product: {e}")
        await client.send_message(chat_id, "❌ Terjadi kesalahan yang tidak terduga.")

@bot.on_callback_query(filters.regex(r"product_"))
async def handle_product_navigation(client, callback_query):
    index = int(callback_query.data.split("_")[1])
    
    # Mengambil daftar produk dari database
    products = products_collection.find()
    product_list = list(products)
    
    # Menjawab callback query
    await show_product(client, callback_query.message.chat.id, product_list, index, callback_query)

@bot.on_callback_query(filters.regex(r"increment_quantity_"))
async def handle_increment_quantity(client, callback_query):
    user_id = callback_query.message.chat.id
    code = callback_query.data.split("_")[1]  # Ambil kode produk dari callback data

    print(f"Received callback data: {callback_query.data}")  # Log data callback
    print(f"Incrementing quantity for product code: {code}")  # Log kode produk

    # Validasi kode produk
    if not code:  # Memeriksa apakah kode valid
        await client.send_message(user_id, "❌ Kode produk tidak valid.")
        return

    # Increment jumlah pesanan untuk pengguna
    user_order_quantities[user_id] = user_order_quantities.get(user_id, 0) + 1

    # Mengambil daftar produk dari database
    products = products_collection.find()
    product_list = list(products)

    # Menampilkan produk dengan jumlah pesanan terbaru
    await show_product(client, callback_query.message.chat.id, product_list, 
                       int(callback_query.message.reply_markup.inline_keyboard[0][0].callback_data.split('_')[1]), callback_query)

@bot.on_callback_query(filters.regex(r"decrement_quantity_"))
async def handle_decrement_quantity(client, callback_query):
    user_id = callback_query.message.chat.id
    data_parts = callback_query.data.split("_")  # Pisahkan berdasarkan "_"
    
    if len(data_parts) != 3:  # Pastikan ada 3 bagian
        await client.send_message(user_id, "❌ Kode produk tidak valid.")
        return

    code = data_parts[2]  # Ambil kode produk dari bagian ketiga

    print(f"Callback data: {callback_query.data}")  # Log data callback
    print(f"Kode produk yang diterima: {code}")  # Log kode produk

    # Validasi kode produk
    if not code or code == "quantity":
        await client.send_message(user_id, "❌ Kode produk tidak valid.")
        return

    # Cek apakah produk ada di database
    product = products_collection.find_one({"code": code})
    if not product:
        await client.send_message(user_id, "❌ Produk tidak ditemukan.")
        return

    # Decrement jumlah pesanan untuk pengguna
    if user_order_quantities.get(user_id, 0) > 0:
        user_order_quantities[user_id] -= 1  # Kurangi jumlah pesanan

    # Mengambil daftar produk dari database
    products = products_collection.find()
    product_list = list(products)

    # Menampilkan produk dengan jumlah pesanan terbaru
    await show_product(client, callback_query.message.chat.id, product_list, 
                       int(callback_query.message.reply_markup.inline_keyboard[0][0].callback_data.split('_')[1]), callback_query)
    
@bot.on_callback_query(filters.regex(r"confirm_order_"))
async def handle_confirm_order(client, callback_query):
    user_id = callback_query.message.chat.id
    data = callback_query.data.split("_")

    # Memeriksa apakah ada cukup data yang diterima
    if len(data) < 4:
        await callback_query.answer("Jumlah pesanan tidak ditentukan.")
        return

    code = data[2]
    quantity_str = data[3]

    # Validasi bahwa quantity adalah angka
    try:
        quantity = int(quantity_str)
        if quantity <= 0:
            await callback_query.answer("Jumlah pesanan harus lebih dari 0.")
            return
    except ValueError:
        await callback_query.answer("Jumlah pesanan harus berupa angka.")
        return
    try:
        # Ambil produk berdasarkan kode produk
        product = products_collection.find_one({"code": code})
        if not product:
            await callback_query.answer("Produk tidak ditemukan.")
            return

        # Ambil akun pengguna
        account = users_collection.find_one({"user_id": user_id})
        if not account:
            await callback_query.answer("Akun tidak ditemukan.")
            return

        # Ambil saldo pengguna
        user_balance = account.get('account_balance', 0)

        # Hitung total harga berdasarkan harga produk
        product_price = product.get('price', 0)
        total_price = product_price * quantity

        # Cek apakah saldo cukup
        if user_balance < total_price:
            await callback_query.answer("Saldo Anda tidak cukup untuk melakukan pemesanan.")
            return

        # Cek ketersediaan stok
        new_stock = product['stock'] - quantity
        if new_stock < 0:
            await callback_query.answer("Stok tidak cukup untuk memenuhi pesanan.")
            return

        # Perbarui stok di database
        products_collection.update_one(
            {"code": code},
            {"$inc": {"stock": -quantity}}  # Mengurangi stok produk
        )
        
        # Perbarui saldo pengguna
        new_balance = user_balance - total_price
        users_collection.update_one({"user_id": user_id}, {"$set": {"account_balance": new_balance}})

        # Simpan rincian pesanan ke koleksi pesanan
        orders_collection.insert_one({
            "user_id": user_id,
            "product_name": product['name'],
            "quantity": quantity,
            "total_price": total_price,
            "order_date": datetime.now()
        })
        
        await callback_query.answer("Pesanan berhasil dilakukan!")

        # Ambil informasi akun untuk setiap item yang dipesan
        user_info = []
        for _ in range(quantity):
            unique_account = users_collection.find_one({"user_id": {"$ne": user_id}}, {"username": 1, "password": 1})
            if unique_account:
                user_info.append(f"Username: {unique_account['username']}, Password: {unique_account['password']}")
                # Hapus akun setelah mengambil jika diperlukan
                users_collection.delete_one({"_id": unique_account["_id"]})

        if not user_info:
            await callback_query.answer("Tidak ada akun yang tersedia untuk diberikan.")
            return

        # Kirim informasi akun
        description = product.get('description', 'Tidak ada deskripsi')
        user_info_message = "\n".join(user_info)

        await callback_query.message.reply(
            f"Pesanan berhasil! Anda telah memesan {quantity} unit dari {product['name']}.\n"
            f"Deskripsi: {description}\n"
            f"Informasi Akun Anda:\n{user_info_message}"
        )
    except Exception as e:
        await callback_query.answer("Terjadi kesalahan saat memproses pesanan.")
        print(f"Error: {e}")  # Log error untuk debugging
